{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","m","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,G,MAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAK,SAAAC,GAAC,OAAK,cAAC,EAAD,CAAiBP,QAASO,GAAfA,EAAEN,WCL1CO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiCHG,E,kDAnCX,aAAe,IAAD,8BACV,gBAaJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACTd,SAAU,GACVW,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAASmB,S,oBAO/C,WAAU,IAAD,EAC0BC,KAAKN,MAA7Bd,EADF,EACEA,SAASW,EADX,EACWA,YACVU,EAAmBrB,EAASsB,QAAQ,SAAApB,GAAC,OACvCA,EAAEL,KAAK0B,cAAcC,SAASb,EAAYY,kBAE9C,OACI,sBAAK/B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CACIY,YAAY,kBACZC,aAAce,KAAKf,eAEvB,cAAC,EAAD,CAAUL,SAAUqB,W,GA/BlBI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9ea6bbfc.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\nimport {Card} from '../card/card.component'\nimport './card-list.styles.css'\n\nexport const CardList = props => {\n    return (\n        <div className='card-list'>\n            {\n                props.monsters.map( m => (<Card key={m.id} monster={m}/> ))\n            }\n        </div>)\n}","import React from \"react\";\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder,handleChange}) => (\n    <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}/>\n)","import { React, Component } from \"react\";\nimport \"./App.css\";\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchField: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({monsters:users}))\n    }\n\n    handleChange = (e) => {\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n        const {monsters,searchField} = this.state;\n        const filteredMonsters = monsters.filter( m =>\n            m.name.toLowerCase().includes(searchField.toLowerCase()));\n\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n                <SearchBox\n                    placeholder='Search monsters'\n                    handleChange={this.handleChange}\n                />\n                <CardList monsters={filteredMonsters} />\n            </div>\n        );\n    }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}